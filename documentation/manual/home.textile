h1. Formee

*_Formee_* eases and helps out to build html forms designs, and also validates its data from both client-side and server-side based on model validation annotations.

h2. Features

- It has all the features of _formee_
- A _form_ wraps an single model
- Automate validations from client-side based on Play model annotations by using _jquery.validate_ plugin.
- Homogeneous error messages from both client-side and server-side, i.e., they appear in the same place.

p(note). This play! module it's designed to work with model objects, don't expect correct behavior if used objects that are not extends from Model.

h2. Getting started

- Add this module to your dependecy.yml file
- This module depends on jQuery library, but play! comes with it, just ensure you don't delete it.

h2. Usage

Include the following files in your views containing forms:

- stylesheets:
# formee/formee-structure.css
# formee/formee-structure-ext.css
# formee/formee-style.css
- javascripts:
# formee/formee-validate.js
# formee/formee-equal-height.js

p(note). The _formee-validate.js_ script contains copies of the [jQuery Validation Plugin] and the [jQuery Metadata Plugin]

p(note). The _forme-equal-height.js_ scripts makes all input elements, within _form_ which _class_ equals "formee", have the same height.

h3. Configure

Configuration for the _convention naming case_ of object models (variables) passing through Controllers to Templates and vice versa.

bc. formee.namingCase

There are two options:

* camelCase
* underscore_case

In case this property is not provided, then by default the naming case will be _camelCase_

*camelCase examples:*

|*Model Name*|*Variable Name*|
|Model|model|
|ModelEntity|modelEntity|
|Model_Entity|model_Entity|
|Model4Entity|model4Entity|
|Model_4_Entity|model_4_Entity|
|CModelEntity|cModelEntity|

*underscore_case examples:*

|*Model Name*|*Variable Name*|
|Model|model|
|ModelEntity|model_entity|
|Model_Entity|model_entity|
|Model4Entity|model_4_entity|
|Model_4_Entity|model_4_entity|
|CModelEntity|c_model_entity|

h3. Internationalisation Messages

The Internationalisation structure is as follows:

bc. package.Model.field

E.g.,

bc. models.Author.age=Age

p(note). # Validation messages for @Unique is missing in Play!, so you have to include it on you own messages file.
E.g.,
validation.unique=Already exists

h2. Fast Tags

*First things first*, every standard attribute that supports a html tag not listed here is optional.

h3. formee.clear

The *formee.clear* tag generates a _div_ element for breaking floating elements.

Params:
* <code>height</code> (optional) - the div height in pixels.

Tag

bc. #{formee.clear height:15/}

bc. #{formee.clear /}

Html

bc. <div class="clear" style="height:15px;"></div>

bc. <div class="clear"></div>

h3. formee.hbox

The *formee.hbox* tag generates a _div_ element for containing more elements aligned horizontally.

* <code>grid</code> (required) - the number of columns for the *div _width_*. _*See "formee framework":http://formee.org/ specification*_.

Tag

bc. #{formee.hbox grid:6}
...
#{/formee.hbox}

Html

bc. <div class="hbox grid-6-12>
...
</div>

h3. formee.vbox

The *formee.vbox* tag generates a _div_ element for containing more elements aligned vertically.

* <code>grid</code> (required) - the number of columns for the *div _width_*. _*See "formee framework":http://formee.org/ specification*_.

Tag

bc. #{formee.vbox grid:3}
...
#{/formee.3box}

Html

bc. <div class="vbox grid-3-12>
...
</div>

h3. formee.form (HTML4)

The *formee.form* tag is identical to the built-in Play form tag except it outputs some JavaScript that prepares the form to be validated by the jQuery validation plugin.

p(note). Keep in mind this tag only wraps a single model object, in other words, doesn't manage multiple model objects nor simple unencapsulated values.
At any rate, you could use class composition and @Transient annotation.
So don't say I didn't warn you!!!

Params:
* <code>arg</code> (the implicit required argument) - action to be invoked after submitting.
* <code>obj</code> (required) - model object from which the form will get the values either for editing or adding (after error submitting, so that the user doesn't have to fill every correct value again).
* <code>method</code> (optional) - if not specified POST by default
* <code>enctype</code> (optional) - determines how the form data is encoded. Whenever data is transmitted from one place to another, there needs to be an agreed upon means of representing that data. Music is translated into written music notation, English is written using letters and punctuation.
In most cases you will not need to use this attribute at all. The default value (i.e. if you don't use this attribute at all) is "application/x-www-form-urlencoded", which is sufficient for almost any kind of form data. The one exception is if you want to do file uploads. In that case you should use "multipart/form-data".

p(note). Either for _adding/creating_ or _editing/updating_, *formee.tag* requires and object model.

E.g.,

<pre><code>
public MyController extends Controller {
    public static void add() {
        Model model = new Model();
        render(model);
    }
    public static void edit(Long id) {
        MyModel model = MyModel.findById(id);
        if (model == null) {
            notFound();
        } else {
            render(model);
        }
    }
}
</code></pre>

p(note). In case of editing, don't forget to put the model *id* into a hidden element.
#{formee.hidden for:"package.Model.id" /}

Tag

bc. #{formee.form @Controller.action(), obj:model}
    ...
#{/formee.form}

Html

bc. <form action="/route/to/action" method="post" accept-charset="utf-8" enctype="application/x-www-form-urlencoded" class="formee" >
    <input type="hidden" name="authenticityToken" value="...">
    ...
</form>

h3. formee.field

The *formee.field* tag is identical to the built-in Play field tag except it puts two extra properties on the field:
* _*field.validationData*_ You need to put this data in an HTML5 data attribute called _data-validate_ on your _input_, _select_, or _textarea_ element.
* _*field.for*_ The full qualified name of a field, i.e. package.Model.field

Params:
* <code>arg</code> (implicit optional argument) - name of the model object
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>

p(note). See "notes":#notes.

Tag

bc. #{formee.field for:'package.Model.field'}
    <label>&{field.name}</label>
    <input type="text" data-validate="${field.validationData}" id="${field.id}" name="${field.name}" value="${field.value}" class="${field.errorClass}">
    <span class="error">${field.error}</span>
#{/formee.field}

Html

bc. <label>...</label>
<input type="text" data-validate={...} id="model_object_field_name" name="model_object.field_name" value="..." class="..."/>
<span class="error">...</span>

h3. formee.label (HTML4)

The *formee.label* tag simplifies the creation of label element...

Params:
* <code>arg</code> (the implicit optional argument) - name of the model object.
* <code>msg</code> (optional) - label text.
* <code>for</code> (optional) - full qualified name of a field, i.e. <code>package.Model.field</code>
* <code>required</code> (optional) - boolean value to indicate, visually, if it's required.

p(note). See "notes":#notes.

Tag

bc. #{formee.label for:'package.Model.field', required:true /}

Html

bc. <label>First name<em class='formee-req'>*</em></label>

h3. formee.error (HTML4)

The *formee.error* tag is very similar to the built-in Play error tag except it wraps the error message into a span element and outputs some JavaScript that prepares the element to be used by the jQuery validation plugin.
It's highly recommended to use it in conjunction with built-in Play _error_ tag.

Params:
<code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>

Tag

bc. #{formee.error for:'package.Model.field' }#{error 'object.field' /}#{/formee.error}

Html

bc. <span for='input_element_id' class='error' generated='true'>...</span>

h3. formee.input (HTML4)

The *formee.input* tag generates any input type: *text, textarea, password, hidden, checkbox, radio, "_checkbool_":#checkbool*.

Params:
* <code>arg</code> (implicit optional argument) - name of the model object.
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>
* <code>type</code> (optional) - input type, if not provided or is not valid, then 'text' is used.

p(note). See "notes":#notes.

Tag

bc. #{formee.input for:'package.Model.field', type:'text' /}

Html

bc. <input type="text" data-validate="{...}" class id="model_field" name="model.field" value/>

h3. formee.text (HTML4)

The *formee.text* tag generates an input element of type _text_

Params:
* <code>arg</code> (implicit optional argument) - name of the model object.
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>

p(note). See "notes":#notes.

Tag

bc. #{formee.text for:'package.Model.field' /}

Html

bc. <input type="text" data-validate="{...}" class id="model_field" name="model.field" value/>

h3. formee.textarea (HTML4)

The *formee.textarea* tag generates an input element of type _text_

Params:
* <code>arg</code> (implicit optional argument) - name of the model object.
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>

p(note). See "notes":#notes.

Tag

bc. #{formee.textarea for:'package.Model.field' /}

Html

bc. <textarea data-validate="{...}" class id="model_field" name="model.field">...</textarea>

h3. formee.password (HTML4)

The *formee.password* tag generates an input element of type _password_

Params:
* <code>arg</code> (implicit optional argument) - name of the model object.
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>

p(note). See "notes":#notes.

Tag

bc. #{formee.password for:'package.Model.field' /}

Html

bc. <input type="password" data-validate="{...}" class id="model_field" name="model.field" value/>

h3. formee.hidden (HTML4)

The *formee.hidden* tag generates an input element of type _hidden_

Params:
* <code>arg</code> (implicit optional argument) - name of the model object.
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>

p(note). See "notes":#notes.

Tag

bc. #{formee.hidden for:"package.Model.field" /}

Html

bc. <input type="hidden" name="model.field" value/>

h3. <a name="checkbool"></a>formee.checkbool (HTML4)

The *formee.checkbool* tag is useful for representing a *_boolean value_* as a checkbox.

Params:
* <code>arg</code> (implicit optional argument) - name of the model object.
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>

p(note). See "notes":#notes.

Tag

bc. #{formee.checkbool for:"package.Model.field" /}

Html

bc. <input type='checkbox' data-validate='{}' class='' id='model_field' name='author.mastermind' value='true' />
<input type='hidden' name='author.mastermind' value='false'/>

h3. formee.timestamp (HTML4)

The *formee.timestamp* tag is useful just for formatting @Temporal (DATE, TIME & TIMESTAMP) fields when editing a record.
The pattern date is gotten from @As(value="...") annotation, if there's no such annotation, then the pattern is gotten from _date.format_ from *application.conf*

p(note). If pattern date fails to be obtained, then the default pattern is: *yyyy-MM-dd*

Params:
* <code>arg</code> (implicit optional argument) - name of the model object.
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>

p(note). See "notes":#notes.

Tag

bc. #{formee.timestamp for:"package.Model.field" /}

Html

bc. <input type="text" data-validate="{...}" class id="model_field" name="model.field" value/>

h3. formee.selectList (HTML4)

The *formee.selectList* generates a _select_ element containing a set of _option_ elements.

p(note). This tag is more useful for a field that requires a value from a _Catalog_, therefore the binding must be single object/primitive.
The annotation validation that makes more sense for this tag is @Required

Params:
* <code>arg</code> (implicit optional argument) - name of the model object.
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>
* <code>items</code> (required) - a Collection of Objects (not necessarily Models), each item will be an _option_.
* <code>valueProperty</code> (required) - the Item field from which the value will be retrieved.
* <code>labelProperty</code> (required) - the Item field from which the label will be named.
* <code>supplementaryLabelProperty</code> (optional) - the Item field from which a supplementary label will be named.

p(note). In case supplementaryLabelProperty is used, the option element will be formed as follows:
@<option>label - supplementaryLabel</option>@

p(note). See "notes":#notes.

Tag

#{formee.selectList for:"package.Model.field", items:collection, valueProperty:"id", labelProperty:"name"/}

Html

bc. <select data-validate="..." class="" id="model_field_id" name="model.field">
    <option></option>
    <option value="1">Option1</option>
    <option value="2">Option2</option>
    ...
    <option value="n">OptionN</option>
</select>

h3. formee.checkboxList (HTML4)

The *formee.checkboxList* generates a group of _checkbox_ elements organized in an _ul_ element.

p(note). This tag is more useful for a field that requires one or mores values from a _Catalog_, therefore the binding must be collection/array of objects/primitives.

Params:
* <code>arg</code> (implicit optional argument) - name of the model object.
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>
* <code>items</code> (required) - a Collection of Objects (not necessarily Models), each item will be a _checkbox_.
* <code>valueProperty</code> (required) - the Item field from which the value will be retrieved.
* <code>labelProperty</code> (required) - the Item field from which the label will be named.

p(note). See "notes":#notes.

Tag

#{formee.checkboxList for:"package.Model.field", items:collection, valueProperty:"id", labelProperty:"name"/}

Html

bc. <ul class="formee-list">
    <li><input type="checkbox" data-validate="..." name="model.field" id="model.field.0" value="0"><label for="model.field.0">Option1</label></li>
    <li><input type="checkbox" name="model.field" id="model.field.1" value="1"><label for="model.field.1">Option1</label></li>
    ...
    <li><input type="checkbox" name="model.field" id="model.field.n" value="n"><label for="model.field.n">OptionN</label></li>
</ul>

h3. formee.radioList (HTML4)

The *formee.radioList* generates a group of _radio_ elements organized in an _ul_ element.

p(note). This tag is more useful for a field that requires a value from a _Catalog_, therefore the binding must be single object/primitive.
The annotation validation that makes more sense for this tag is @Required

Params:
* <code>arg</code> (implicit optional argument) - name of the model object.
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>
* <code>items</code> (required) - a Collection of Objects (not necessarily Models), each item will be a _radio_.
* <code>valueProperty</code> (required) - the Item field from which the value will be retrieved.
* <code>labelProperty</code> (required) - the Item field from which the label will be named.

p(note). See "notes":#notes.

Tag

#{formee.radioList for:"package.Model.field", items:collection, valueProperty:"id", labelProperty:"name"/}

Html

bc. <ul class="formee-list">
    <li><input type="radio" data-validate="..." name="model.field" id="model.field.0" value="0"><label for="model.field.0">Option1</label></li>
    <li><input type="radio" name="model.field" id="model.field.1" value="1"><label for="model.field.1">Option1</label></li>
    ...
    <li><input type="radio" name="model.field" id="model.field.n" value="n"><label for="model.field.n">OptionN</label></li>
</ul>

h3. formee.submit (HTML4)

The *formee.submit* generates an input element of type *submit*.

Params:
* <code>value</code> (optional) - visual name of the input. If not provided, the web browser creates a default value.</code>

p(note). This tag will try to get an internationalized message based on the value provided and the messages file.

Tag

bc. #{formee.submit value:"Create" /}

or

bc. #{formee.submit value:"views.model.create.submit" /}

Html

bc. <input type="submit" value="Create">

h3. formee.reset (HTML4)

The *formee.reset* generates an input element of type *reset*.

Params:
* <code>value</code> (optional) - visual name of the input. If not provided, the web browser creates a default value.</code>

p(note). This tag will try to get an internationalized message based on the value provided and the messages file.

Tag

bc. #{formee.reset value:"Clear" /}

or

bc. #{formee.reset value:"views.model.reset" /}

Html

bc. <input type="reset" value="Clear">

h3. <a name="notes"></a>*Notes*

p(note). If _for_ is not provided, an exception is thrown.

p(note). If _arg_ is not provided, then, by convention, the name of the model object will be the model name converted to underscore_case

p(note). Provide _arg_ if the name of model object being passed to a template doesn't follow the underscore_case convention.

h2. Slow Tags

h3. formee.h_box

The *formee.h_box* tag generates _label_, an _input_ and a _span_ (for error messages) aligned horizontally and wrapped by a _div_ element.

Params:
* <code>arg</code> (implicit optional argument) - name of the model object.
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>
* <code>type</code> (optional) - input type, if this is not provided or is not valid, then 'text' is used.
* <code>value</code> (optional) - field value, if this is not provided, then the default value from model is used. When creating a record, it's useful as a suggested value.
* <code>label_grid</code> (required) - the number of columns for placing the label. _*See "formee framework":http://formee.org/ specification*_.
* <code>input_grid</code> (required) - the number of columns for placing the input. _*See "formee framework":http://formee.org/ specification*_.
* <code>required</code> (optional) - boolean value to indicate, visually, if it's required.

Tag

bc. #{formee.h_box for:"package.Model.field", type:'text', value:val, label_grid:3, input_grid:4, required:true /}

Html

bc. <div class="h-block grid-12-12 ">
    <div class="grid-3-12">
        <label for='model_field' required="true" >Field name<em class='formee-req'>*</em></label>
    </div>
    <div class="grid-4-12">
        <input type='text' data-validate='{...}' class='' id='model_field' name='model.field' value=''  />
        <span class='error' for='model_field' generated='true'></span>
    </div>
</div>

h3. formee.v_box

The *formee.v_box* tag generates _label_, an _input_ and a _span_ (for error messages) aligned vertically and wrapped by a _div_ element.

Params:
* <code>arg</code> (implicit optional argument) - name of the model object.
* <code>for</code> (required) - full qualified name of a field, i.e. <code>package.Model.field</code>
* <code>type</code> (optional) - input type, if this is not provided or is not valid, then 'text' is used.
* <code>value</code> (optional) - field value, if this is not provided, then the default value from model is used. When creating a record, it's useful as a suggested value.
* <code>grid</code> (required) - the number of columns for placing the elements (label, input, and span). _*See "formee framework":http://formee.org/ specification*_.
* <code>required</code> (optional) - boolean value to indicate, visually, if it's required.
<dl>

Tag

bc. #{formee.v_box for:'package.Model.field', type:'text', value:val, grid:4, required:true /}

Html

bc. <div class="v-block grid-4-12 ">
     <label for='model_field' required="true" >Field name<em class='formee-req'>*</em></label>
    <input type='text' data-validate='{...}' class='' id='model_field' name='model.field' value=''  />
    <span class='error' for='model_field' generated='true'></span>
</div>

h3. formee.css

The *formee.css* tag generates three required style elements: _formee-structure.css_, _formee-structure-ext.css_ and _formee.stye.css_

Tag

bc. #{formee.css/}

Html

bc. <link rel="stylesheet" type="text/css" href="/public/stylesheets/formee/formee-structure.css" charset="utf-8" ></link>
<link rel="stylesheet" type="text/css" href="/public/stylesheets/formee/formee-structure-ext.css" charset="utf-8" ></link>
<link rel="stylesheet" type="text/css" href="/public/stylesheets/formee/formee-style.css" charset="utf-8" ></link>

h2. Supported Annotations

The module currently supports the following annotations:

* Required
* Email
* Min
* Max
* Range
* MinSize
* MaxSize
* URL
* Unique, but only validated at server-side

h2. Sample application

One sample demo is part of the distribution. Don’t forget to run play deps so that it resolves dependencies.

p(note). The demo was laid out using "52framework":http://52framework.com/

h2. TODO

Implement fast tags for HTML4 input types:

* multipleSelectList

Implement validation for @As annotation from @Temporal fields

Implement a _calendar_ input type

Implement fast tags for HTML5 input types:

* search
* tel
* url
* email
* datetime
* date
* month
* week
* time
* datetime-local
* number
* range
* color

Implement validation via Ajax.

Implement secure password mechanism.

Include validation using jQuery.validationEngine plug-in.


Provide a formee-validate.js min VERSION

h2. Credits

Author: Omar O. Román

Formee module is inpired and based on the following components:

- "Formee":http://formee.org/ framework by Bernard De Luna, Daniel Araujo, and Marcello Manso
- "jqvalidate":http://www.playframework.org/modules/jqvalidate module by Michael Murray
- "jqvalidation":http://www.playframework.org/modules/jqvalidation module by Ahmed Mahmoud Mohammed Abd El-wahab
- "html5validate":http://www.playframework.org/modules/html5validation module by Sebastian Hoß
- "jquery.validate plug-in":http://bassistance.de/jquery-plugins/jquery-plugin-validation/ by Jörn Zaefferer
- "jquery.metadata plug-in":http://plugins.jquery.com/project/metadata by John Resig, Yehuda Katz, Jörn Zaefferer, Paul McLanahan
- "52framework":http://52framework.com/ by enavu network folks.
